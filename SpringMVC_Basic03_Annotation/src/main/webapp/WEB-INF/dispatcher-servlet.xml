<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">

<!-- 
  
  태그 <context:annotation-config />는 다음의 BeanPostProcessor를 함께 등록 한다.
- @Required(RequiedAnnotationBeanPostProcessor)
- @Autowired(AutowiredAnnotationBeanPostProcessor)
- @Resource, @PostConstruct, @PreDestory(CommonAnnotationBeanPostProcessor)
- @Configuration(ConfigurationClassPostProcessor)

-->

<!-- 
자동 빈객체 생성 : <context:component-scan>
<context:component-scan base-package="com.controller"
공통빈
@Controller
Presentation Layer에서 Contoller를 명시하기 위해서 사용

@Service
Business Layer에서 Service를 명시하기 위해서 사용

@Repository 
Persistence Layer에서 DAO를 명시하기 위해서 사용

@Component
그 외에 자동으로 스캔해서 등록하고 싶은 것들을 위해 사용
-->

<!-- @Autowired 자동 처리를 빈객체 자동 생성 등록 -->
<context:annotation-config />
	
<!-- 공통빈 -->
<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<property name="prefix">
		<value>/WEB-INF/views/</value>
	</property>
	<property name="suffix">
		<value>.jsp</value>
	</property>
</bean>	
	
<!-- TEST_1 -->
<bean id="helloController" class="com.controller.HelloController"></bean>

<!-- TEST_2 -->
<!-- 하나의 요청주소를 전송방식에 따라서 화면/서비스처리 판단! -->
<bean class="com.controller.NewArticleController"></bean> <!-- id는 객체를 injection할때만 필요하므로 생략가능 -->
<bean class="com.service.ArticleService"></bean>

<!-- TEST_3 parameter를 List<OrderItem>으로 -->
<bean class="com.controller.OrderController"></bean>

<!-- TEST_4 @RequestParam -->
<bean class="com.controller.SearchController"></bean>

<!-- TEST_5 @CookieValue -->
<bean class="com.controller.CookieController"></bean>

<!-- TEST_6 파일업로드 -->
<!-- 
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

CommonsMultipartFile 사용해서 업로드를 하려면 몇가지 기본세팅을 해야한다.

CommonsMultipartResolver : 업로드한 파일에 대한 정보관리(크기, 이름, 중복이름정책 등)

파일처리하려면 의존객체가 필요함.
com.springsource.org.apache.commons.fileupload-1.2.0.jar
com.springsource.org.apache.commons.io-1.4.0.jar

-->

<bean class="com.controller.ImageController"></bean>


<!-- 파일업로드 보조(반드시필요!) -->
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<property name="maxUploadSize" value="10485760"></property> <!-- 파일최대 약 10메가 -->
	<property name="defaultEncoding" value="UTF-8"></property> <!-- 한글처리 -->
</bean>

</beans> 




